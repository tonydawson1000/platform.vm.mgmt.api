// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Platform.Vm.Mgmt.Persistence.EfCore.Migrations
{
    [DbContext(typeof(PlatformVmMgmtDbContext))]
    [Migration("20250217173036_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Platform.Vm.Mgmt.Domain.Entities.DataCentre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DataCentres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d18519b3-4b35-4d5a-8720-2593881615e5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Primary DC",
                            IsEnabled = true,
                            Location = "London, UK",
                            Name = "Sov House"
                        },
                        new
                        {
                            Id = new Guid("d28519b3-4b35-4d5a-8720-2593881615e5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Secondary DC",
                            IsEnabled = true,
                            Location = "London, UK",
                            Name = "Power Gate"
                        },
                        new
                        {
                            Id = new Guid("d38519b3-4b35-4d5a-8720-2593881615e5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "DC in the North",
                            IsEnabled = true,
                            Location = "Manchester, UK",
                            Name = "MA-4"
                        });
                });

            modelBuilder.Entity("Platform.Vm.Mgmt.Domain.Entities.Environment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataCentreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataCentreId");

                    b.ToTable("Environments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1b64577-1c93-4d83-a160-d0c100b75c0c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCentreId = new Guid("d28519b3-4b35-4d5a-8720-2593881615e5"),
                            Description = "Houses resources required for development purposes, including (but not limited to) day-to-day development, automated integration (INT) testing, systems integration testing (SIT), internal demos.",
                            IsEnabled = true,
                            Name = "Development",
                            Sequence = 1,
                            Tier = 4
                        },
                        new
                        {
                            Id = new Guid("e2b64577-1c93-4d83-a160-d0c100b75c0c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCentreId = new Guid("d28519b3-4b35-4d5a-8720-2593881615e5"),
                            Description = "Provides the environment for operational acceptance testing, including failover and performance testing.",
                            IsEnabled = true,
                            Name = "Operational Acceptance Testing",
                            Sequence = 2,
                            Tier = 3
                        },
                        new
                        {
                            Id = new Guid("e3b64577-1c93-4d83-a160-d0c100b75c0c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCentreId = new Guid("d28519b3-4b35-4d5a-8720-2593881615e5"),
                            Description = "Final verification testing for software changes from customer end-users.",
                            IsEnabled = true,
                            Name = "User Acceptance Testing",
                            Sequence = 3,
                            Tier = 2
                        },
                        new
                        {
                            Id = new Guid("e4b64577-1c93-4d83-a160-d0c100b75c0c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCentreId = new Guid("d18519b3-4b35-4d5a-8720-2593881615e5"),
                            Description = "Live operational environment at the very highest level of isolation. This houses the services that customers pay to use at a 99.9% availability SLA.",
                            IsEnabled = true,
                            Name = "Production Systems",
                            Sequence = 4,
                            Tier = 1
                        });
                });

            modelBuilder.Entity("Platform.Vm.Mgmt.Domain.Entities.Vlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Vlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("113d0837-e1e4-4078-8da3-9f62a4c33c58"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NEW VLAN in ML for DEV Deployments of VMs ...",
                            EnvironmentId = new Guid("e1b64577-1c93-4d83-a160-d0c100b75c0c"),
                            IsEnabled = true,
                            Name = "ML-DEV-PG"
                        });
                });

            modelBuilder.Entity("Platform.Vm.Mgmt.Domain.Entities.Environment", b =>
                {
                    b.HasOne("Platform.Vm.Mgmt.Domain.Entities.DataCentre", "DataCentre")
                        .WithMany("Environments")
                        .HasForeignKey("DataCentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataCentre");
                });

            modelBuilder.Entity("Platform.Vm.Mgmt.Domain.Entities.Vlan", b =>
                {
                    b.HasOne("Platform.Vm.Mgmt.Domain.Entities.Environment", "Environment")
                        .WithMany("Vlans")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("Platform.Vm.Mgmt.Domain.Entities.DataCentre", b =>
                {
                    b.Navigation("Environments");
                });

            modelBuilder.Entity("Platform.Vm.Mgmt.Domain.Entities.Environment", b =>
                {
                    b.Navigation("Vlans");
                });
#pragma warning restore 612, 618
        }
    }
}